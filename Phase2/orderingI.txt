% This is a test file for phase 2, I. Ordering

% customer inputs dish's number, quantity consecutively inside a while loop and after each loop, customer is asked if he or she wants to keep ordering or not. 

% dishes's number and quantity are then store in two different arrays.

% in this code variable "dish" represents dish's number, variable "numDish" represents quantity and variable "finish" represents answer for "order more or not" question.

% Since all of the test case for each part 1, 2, 3 are demonstrated individually, I will only test if the code can work smoothly with some general cases.



% this is the code:



% vector contain number represent dishes
allDish=[];
% vector contain quantity
quantity=[];

% intruction
    disp("When ordering, enter the dishes'numbers'!")
    disp("E.g: for Vietnamese traditional coffee, enter '1'")
    disp("We don't take more than 9 per dish per time!")

% handle order using while loop
running=0;
while running==0

   % 1. Order dishes
   % take input
   dish=input("Choose your dishes:",'s');
   dish=str2double(dish);
   % choose dish
   rightDish=0;
   while rightDish==0
       % allow input from 1 to 10
       if dish<1 || dish>10 || dish~=round(dish) || isnan(dish)
           disp("Please enter the dish's number again!")
           dish=input("Choose your dishes:","s");
           dish=str2double(dish);
       else
           rightDish=1;
       end
   end
   % store in vector
   allDish =[ allDish dish];

   % 2. Order quantity
   % take input
   numDish=input(" Quantity:","s");
   numDish=str2double(numDish);
   % choose quantity
   integer=0;
   while integer==0
       % allow quantity from 1 to 9
       if numDish<1 || numDish>9 || numDish~=round(numDish) || isnan(numDish)
           disp("Please enter the quantity again!")
           numDish=input(" Quantity: ","s");
           numDish=str2double(numDish);
       else 
           integer=1;
       end
   end
   % store in vector
   quantity=[quantity numDish];

   % 3. Order more ?
   % take input
   finish=input("Do you want to finish your order? (Yes=y; No=n)","s");
   % allow "y" for yes and "n" for no only
   while finish~="y" && finish~="n"
       disp("Please enter the right systax!");
       finish=input("Do you want to finish your order? (Yes=y; No=n)","s");
   end
   % stop order
   if finish=="n"
       disp("Please continue ordering!")
   else
       % order more
       if finish=="y"
           running=1;
       end
   end
end

disp(allDish)
disp(quantity)



% The code is considered successful if it can display the exact order in the form of two arrays: one is for dish's number and the other is for quantity. There must not exists any cracks during running and all the wrong inputs must be asked to replace continuously until right inputs are entered.

% If the customer orders the same dish again after loop, I don't want to combine them to together to seperate each time like if there is actually two peoples go together and want to split the bill. 

% Test case 1: all inputs are accurate, and customer order 2 dishes, which means at the end of the first loop they enter 'n' and the second time is 'y'

input: input 1: dish:1
                numDish:1
                stop order: 'n'
       input 2: dish:8
                numDish:3
                stop order: 'y'



expected output: 1 8
                 1 3

When ordering, enter the dishes'numbers'!
E.g: for Vietnamese traditional coffee, enter '1'
We don't take more than 9 per dish per time!
Choose your dishes:1
 Quantity:1
Do you want to finish your order? (Yes=y; No=n)n
Please continue ordering!
Choose your dishes:8
 Quantity:3
Do you want to finish your order? (Yes=y; No=n)y

     1     8

     1     3



actual output: 1 8
               1 3

When ordering, enter the dishes'numbers'!
E.g: for Vietnamese traditional coffee, enter '1'
We don't take more than 9 per dish per time!
Choose your dishes:1
 Quantity:1
Do you want to finish your order? (Yes=y; No=n)n
Please continue ordering!
Choose your dishes:8
 Quantity:3
Do you want to finish your order? (Yes=y; No=n)y

     1     8

     1     3



% How i will keep testing the code: different kinds of input for all three variables dish, dishNum and finish variable. Accurate inputs for "dish" are integers [1,10], for "dishNum" are integers [1,9] and for "finish" are 'y' and 'n'. For "dish" and "dishNum", I will input characters, strings, negative numbers, decimal, numbers that not in the domain to check if my code can seperate them from accurate inputs in each loops and stop when an accurate input is entered. For "finish" variable, I will check when enter 'y' or 'n' the code will work like I want, or when I enter wrong inputs like numbers or other characters.

% For example:

% Test case 2: different kind of inputs, both wrong and right syntaxs to check code's flow

input: dish:a (not number --> wrong --> enter another input)
       dish:12 (not in the domain [1,10] --> wrong --> enter again)
       dish:4 (integers, inside [1,10] --> right --> ask for quantity)
       dish: (nothing) (no input --> wrong --> enter another input)
       numDish:$ (not number --> wrong --> enter again)
       numDish:10 (not inside [1,9] --. wrong enter again)
       numDish:3 (integers, inside [1,9] --> right --> ask if want to order more)
       dish: (nothing) (no input --> wrong --> enter another input)
       finish:k (neither'y' or 'n' --> wrong --> enter again)
       finish:n ('n' --> right --> keep ordering, return to the top)
       dish:1.3 (not integer --> wrong --> enter again)
       dish:1 (integers, inside [1,10] --> right --> ask for quantity)
       quantity:0 (not inside [1,9] --. wrong enter again)
       quantity:1 (integers, inside [1,9] --> right --> ask if want to order more)
       finish:12 (neither'y' or 'n' --> wrong --> enter again)
       finish:y ('y' --> right --> stop order)



expected output:

When ordering, enter the dishes'numbers'!
E.g: for Vietnamese traditional coffee, enter '1'
We don't take more than 9 per dish per time!
Choose your dishes:a
Please enter the dish's number again!
Choose your dishes:12
Please enter the dish's number again!
Choose your dishes:4
 Quantity:$
Please enter the quantity again!
 Quantity: 10
Please enter the quantity again!
 Quantity: 3
Do you want to finish your order? (Yes=y; No=n)k
Please enter the right systax!
Do you want to finish your order? (Yes=y; No=n)n
Please continue ordering!
Choose your dishes:1.3
Please enter the dish's number again!
Choose your dishes:1
 Quantity:0
Please enter the quantity again!
 Quantity: 1
Do you want to finish your order? (Yes=y; No=n)12
Please enter the right systax!
Do you want to finish your order? (Yes=y; No=n)y

     4     1

     3     1



actual output:


When ordering, enter the dishes'numbers'!
E.g: for Vietnamese traditional coffee, enter '1'
We don't take more than 9 per dish per time!
Choose your dishes:a
Please enter the dish's number again!
Choose your dishes:12
Please enter the dish's number again!
Choose your dishes:4
 Quantity:$
Please enter the quantity again!
 Quantity: 10
Please enter the quantity again!
 Quantity: 3
Do you want to finish your order? (Yes=y; No=n)k
Please enter the right systax!
Do you want to finish your order? (Yes=y; No=n)n
Please continue ordering!
Choose your dishes:1.3
Please enter the dish's number again!
Choose your dishes:1
 Quantity:0
Please enter the quantity again!
 Quantity: 1
Do you want to finish your order? (Yes=y; No=n)12
Please enter the right systax!
Do you want to finish your order? (Yes=y; No=n)y
     4     1

     3     1
        
       

 
                
                












              




   


